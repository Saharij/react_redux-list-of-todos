{"version":3,"sources":["api/index.ts","store/index.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","response","json","FETCH_TODOS_REQUEST","FETCH_TODOS_SUCCESS","FETCH_TODOS_FAILED","FETCH_USER_REQUEST","FETCH_USER_SUCCESS","FETCH_USER_FAILED","todosData","state","todos","userData","user","fetchUser","id","dispatch","type","getCurrentUser","data","catch","initialState","loading","undefined","message","store","createStore","action","error","composeWithDevTools","applyMiddleware","thunk","mapDispatchToProps","fetchTodos","connector","connect","TodoList","searcInput","optionSelected","handleSelect","e","setState","target","value","this","props","onUserChange","todosFiltered","filter","title","toLowerCase","includes","trim","completed","className","placeholder","onChange","map","todo","htmlFor","readOnly","onClick","userId","React","Component","CurrentUser","onClear","useDispatch","useSelector","useEffect","name","email","phone","App","useState","selectedUserId","setSelectedUserId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af3df30d.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}/${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => request('todos');\nexport const getCurrentUser = (id: number | undefined): Promise<User> => request(`users/${id}`);\n","import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { getCurrentUser, getTodos } from '../api';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst FETCH_TODOS_REQUEST = 'FETCH_TODOS_REQUEST';\nconst FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\nconst FETCH_TODOS_FAILED = 'FETCH_TODOS_FAILED';\nconst FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\nconst FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nconst FETCH_USER_FAILED = 'FETCH_USER_FAILED';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const todosData = (state: RootState) => state.todos;\nexport const userData = (state: RootState) => state.user;\nexport const getMessage = (state: RootState) => state.message;\n\nexport const fetchTodos = () => {\n  return (dispatch: any) => {\n    dispatch({ type: FETCH_TODOS_REQUEST });\n    getTodos()\n      .then(response => dispatch({ type: FETCH_TODOS_SUCCESS, data: response }))\n      .catch(() => dispatch({ type: FETCH_TODOS_FAILED }));\n  };\n};\n\nexport const fetchUser = (id: number | undefined) => {\n  return (dispatch: any) => {\n    dispatch({ type: FETCH_USER_REQUEST });\n    getCurrentUser(id)\n      .then(response => dispatch({ type: FETCH_USER_SUCCESS, data: response }))\n      .catch(() => dispatch({ type: FETCH_USER_FAILED }));\n  };\n};\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  todos: Todo[] | [];\n  user: User | undefined;\n  message: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  todos: [],\n  user: undefined,\n  message: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case FETCH_TODOS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case FETCH_TODOS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        todos: action.data,\n      };\n\n    case FETCH_TODOS_FAILED:\n      return {\n        ...state,\n        error: true,\n      };\n\n    case FETCH_USER_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case FETCH_USER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        user: action.data,\n      };\n\n    case FETCH_USER_FAILED:\n      return {\n        ...state,\n        error: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React, { ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTodos, RootState, todosData } from '../../store';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  fetchTodos: () => void;\n  onUserChange: (id: number) => void;\n};\n\ntype State = {\n  searcInput: string;\n  optionSelected: string,\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  todos: todosData(state),\n});\n\nconst mapDispatchToProps = {\n  fetchTodos,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nclass TodoList extends React.Component<Props, State> {\n  state = {\n    searcInput: '',\n    optionSelected: 'all',\n  };\n\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n\n  handleSelect = (e: ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ optionSelected: e.target.value });\n  };\n\n  searcInput = (e: string) => {\n    this.setState({ searcInput: e });\n  };\n\n  render() {\n    const { todos, onUserChange } = this.props;\n    const { searcInput, optionSelected } = this.state;\n\n    let todosFiltered = todos.filter(({ title }) => (\n      title.toLowerCase().includes(searcInput.toLowerCase().trim())\n    ));\n\n    if (optionSelected === 'completed') {\n      todosFiltered = todosFiltered.filter(({ completed }) => completed === true);\n    } else if (optionSelected === 'inProgress') {\n      todosFiltered = todosFiltered.filter(({ completed }) => completed === false);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2\n          className=\"title is-2\"\n        >\n          Todos:\n        </h2>\n\n        <form action=\"\">\n          <input\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Write a title here\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              this.searcInput(e.target.value);\n            }}\n          />\n          <select\n            id=\"select\"\n            className=\"select is-fullwidth mt-3 mb-5\"\n            onChange={this.handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"inProgress\">In progress</option>\n          </select>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosFiltered.map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  todo.completed === false\n                    ? 'TodoList__item TodoList__item--unchecked'\n                    : 'TodoList__item TodoList__item--checked'\n                }\n              >\n                <label htmlFor=\"title\">\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    id=\"title\"\n                  />\n                </label>\n                <p>\n                  {todo.title}\n                </p>\n\n                <button\n                  type=\"button\"\n                  className=\"button is-info is-normal\"\n                  onClick={() => onUserChange(todo.userId)}\n                >\n                  {`User: ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connector(TodoList);\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchUser, userData } from '../../store';\nimport './CurrentUser.scss';\n\ntype Props = {\n  onClear: (id: undefined) => void;\n  userId: number | undefined;\n};\n\nconst CurrentUser: React.FC<Props> = ({\n  onClear,\n  userId,\n}) => {\n  const dispatch = useDispatch();\n  const user = useSelector(userData);\n\n  useEffect(() => {\n    dispatch(fetchUser(userId));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${user?.name}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">\n        {user?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <button\n        type=\"button\"\n        className=\"button is-primary is-fullwidth mt-5\"\n        onClick={() => {\n          onClear(undefined);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nexport default CurrentUser;\n","import { useState } from 'react';\nimport './App.scss';\n// import Start from './components/Start';\n// import { Finish } from './components/Finish';\n\n// import { isLoading, getMessage } from './store';\nimport TodoList from './components/TodoList/TodoList';\nimport CurrentUser from './components/CurrentUser/CurrentUser';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number | undefined>();\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {/* <h2>{loading ? 'Loading...' : message}</h2> */}\n\n      {/* <Start title=\"Start loading\" />\n      <Finish title=\"Succeed loading\" message=\"Loaded successfully!\" />\n      <Finish title=\"Fail loading\" message=\"An error occurred when loading data.\" /> */}\n      <TodoList\n        onUserChange={setSelectedUserId}\n      />\n      {selectedUserId && (\n        <CurrentUser\n          userId={selectedUserId}\n          onClear={setSelectedUserId}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}